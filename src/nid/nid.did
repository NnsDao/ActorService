type BasicUserInfo = record {
  nickname : text;
  social : vec record { text; text };
  intro : text;
  avatar : text;
};
type Metadata = record {
  owner : opt principal;
  canister_id : text;
  admin_list : vec principal;
};
type Result = variant { Ok; Err : text };
type Result_1 = variant { Ok : UserItem; Err : text };
type Result_2 = variant { Ok : TotalUserInfo; Err : text };
type Result_3 = variant { Ok : Metadata; Err : text };
type StakeItem = record {
  status : StakeItemStatus;
  duration : StakeItemDuration;
  start_time : nat64;
  profit : text;
  project : text;
};
type StakeItemDuration = variant { LongTerm; Month : nat32 };
type StakeItemStatus = variant { Banned; Valid; Expired };
type TotalUserInfo = record {
  log : vec UserLog;
  nid : text;
  nickname : text;
  social : vec record { text; text };
  level : nat64;
  credit : nat64;
  stake : vec StakeItem;
  badge : vec text;
  wallet : vec record { text; text; text };
  last_login_at : nat64;
  intro : text;
  avatar : text;
};
type UserItem = record {
  log : vec UserLog;
  nid : text;
  nickname : text;
  social : vec record { text; text };
  level : nat64;
  credit : nat64;
  stake : vec StakeItem;
  badge : vec text;
  last_login_at : nat64;
  intro : text;
  avatar : text;
};
type UserLog = record { time : int64; detail : text; event : text };
service : {
  add_admin : (principal) -> (Result);
  add_stake : (StakeItem) -> (Result_1);
  bind_wallet : (record { text; text; text }) -> (Result);
  get_bind_wallet : () -> (vec record { text; text; text }) query;
  login : (text) -> (Result_2);
  metadata : () -> (Result_3) query;
  system_time : () -> (nat64) query;
  update_user_info : (BasicUserInfo) -> (Result_2);
  user_info : () -> (Result_2) query;
}